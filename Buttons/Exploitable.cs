using Galaxy.API;
using Galaxy.Settings;
using Galaxy.Wrappers;
using System;
using UnityEngine;
using VRC;
using VRC.Core;

namespace Galaxy.Buttons
{
    internal class Exploitable
    {
        public static string backupID = "";
        public static void ButtonExploits(QMTabMenu tabMenu)
        {
            var Exploits = new QMNestedButton(tabMenu, 3, 3, "Exploits", "Galaxy Explots", "Galaxy Exploits");

            var GoToRoom = new QMSingleButton(Exploits, 3, 0, "Go To World", delegate
            { try { string RoomID = "wrld_5fdc0394-2ca7-4547-bb74-86ea95fa29a0:43892"; API.inputpopout.run(" Room ID", value => RoomID = value, () => { VRC.SDKBase.Networking.GoToRoom(RoomID); Galaxy.API.LogHandler.Log("World", $"Going To {RoomID} "); }); } catch (Exception e) { Console.WriteLine(e); } }, "Go to Room");

            var ChangeAVIId = new QMSingleButton(Exploits, 2, 0, "Change Avi By ID", delegate
            { try { string AvatarID = "AVATAR ID"; API.inputpopout.run(" Avatar", value => AvatarID = value, () => { Galaxy.Wrappers.PlayerWrapper.ChangePlayerAvatar(AvatarID); Galaxy.API.LogHandler.Log("Avatars", $"Changing to {AvatarID} "); }); } catch (Exception e) { Console.WriteLine(e); } }, "Change Avatar By ID");

            var PCCrash = new QMToggleButton(Exploits, 1, 1, "PC Crasher", delegate
            {
                backupID = APIUser.CurrentUser.avatarId;
                Wrappers.PlayerWrapper.ChangePlayerAvatar(nconfig.PCCrash);
                LogHandler.Log("Crasher", $"Changed To Avatar {nconfig.PCCrash}");
                Player player = Player.prop_Player_0;
                player.gameObject.SetActive(false);
            }, delegate
            {
                Player player = Player.prop_Player_0;
                player.gameObject.SetActive(true);
                PlayerWrapper.ChangePlayerAvatar(backupID);
                LogHandler.Log("Crasher", $"Changed To Avatar {backupID}");

            }, "Crash All PC Users");

            var QuestCrash = new QMToggleButton(Exploits, 2, 1, "Quest Crasher", delegate
            {
                backupID = APIUser.CurrentUser.avatarId;
                PlayerWrapper.ChangePlayerAvatar(nconfig.QuestCrash);
                LogHandler.Log("Crasher", $"Changed To Avatar {nconfig.QuestCrash}");
                Player player = Player.prop_Player_0;
                player.gameObject.SetActive(false);
            }, delegate
            {
                Player player = Player.prop_Player_0;
                player.gameObject.SetActive(true);
                PlayerWrapper.ChangePlayerAvatar(backupID);
                LogHandler.Log("Crasher", $"Changed To Avatar {backupID}");
            }, "Crash All Quest Users");

            var hideself = new QMToggleButton(Exploits, 3, 1, "Hideself", delegate
            {
                Player player = Player.prop_Player_0;
                player.gameObject.SetActive(false);
                LogHandler.Log("Crasher", "Hid your Avatar its safe now");
            }, delegate
            {
                Player player = Player.prop_Player_0;
                player.gameObject.SetActive(true);
                LogHandler.Log("Crasher", "Unhid Avatar");
            }, "Hide Self");

            var FlyBool = new QMToggleButton(Exploits, 4, 1, "Fly", delegate
            {
                Config.ShouldFly = true;
                VRCPlayer.field_Internal_Static_VRCPlayer_0.GetComponent<CharacterController>().enabled = false;
                LogHandler.Log("Fly", $"Fly Enabled");
            }, delegate
            {
                Config.ShouldFly = false;
                VRCPlayer.field_Internal_Static_VRCPlayer_0.GetComponent<CharacterController>().enabled = true;
                LogHandler.Log("Fly", $"Fly Disabled");
            }, "Toggle Fly");
        }
    }
}
