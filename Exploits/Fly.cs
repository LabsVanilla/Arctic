using System;
using UnityEngine;
using UnityEngine.XR;
using VRC.Animation;
using VRC;
using Galaxy.Settings;
using Galaxy.API;

namespace Galaxy.Exploits
{
    internal class Fly
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE0044:Add readonly modifier", Justification = "<Pending>")]
        private VRCMotionState vrcMotionState;
        private static VRC.Player LocalPlayer;
        private static Transform CameraTransform;
        public static float FlySpeed = 1f;
        
        public static bool IsFly, IsRunning = false;
        public static Player GetPlayer() => Player.prop_Player_0;
        public static void FlyB()
        {

            if (Config.ShouldFly)
            { 
                if (RoomManager.field_Internal_Static_ApiWorld_0 == null) return;

                if (LocalPlayer == null || CameraTransform == null)
                {
                    LocalPlayer = GetPlayer();
                    CameraTransform = Camera.main.transform;
                }
                if (Input.GetAxis("Vertical") != 0f) LocalPlayer.transform.position += CameraTransform.forward * 3f * Time.deltaTime * Input.GetAxis("Vertical");
                if (Input.GetAxis("Horizontal") != 0f) LocalPlayer.transform.position += CameraTransform.right * 3f * Time.deltaTime * Input.GetAxis("Horizontal");
                if (Input.GetKey(KeyCode.E)) LocalPlayer.transform.position += CameraTransform.up * 3f * Time.deltaTime;
                if (Input.GetKey(KeyCode.Q)) LocalPlayer.transform.position += CameraTransform.up * -FlySpeed * 2f * Time.deltaTime;
                if (Input.GetKey(KeyCode.A)) LocalPlayer.transform.position += CameraTransform.right * -FlySpeed * 2f * Time.deltaTime;
                if (Input.GetKey(KeyCode.D)) LocalPlayer.transform.position += CameraTransform.right * 3f * Time.deltaTime;
            }
        }
    }
}
